{
  "_args": [
    [
      {
        "raw": "https://github.com/jestcastro/cordova-plugin-firebase.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/jestcastro/cordova-plugin-firebase.git",
        "spec": "git+https://github.com/jestcastro/cordova-plugin-firebase.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jestcastro/cordova-plugin-firebase.git",
          "sshUrl": "git+ssh://git@github.com/jestcastro/cordova-plugin-firebase.git",
          "httpsUrl": "git+https://github.com/jestcastro/cordova-plugin-firebase.git",
          "gitUrl": "git://github.com/jestcastro/cordova-plugin-firebase.git",
          "shortcut": "github:jestcastro/cordova-plugin-firebase",
          "directUrl": "https://raw.githubusercontent.com/jestcastro/cordova-plugin-firebase/master/package.json"
        }
      },
      "/Users/Nagu/Downloads/Nearme/NearmeApp"
    ]
  ],
  "_from": "git+https://github.com/jestcastro/cordova-plugin-firebase.git",
  "_id": "cordova-plugin-firebase@0.1.24",
  "_inCache": true,
  "_location": "/cordova-plugin-firebase",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/jestcastro/cordova-plugin-firebase.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/jestcastro/cordova-plugin-firebase.git",
    "spec": "git+https://github.com/jestcastro/cordova-plugin-firebase.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jestcastro/cordova-plugin-firebase.git",
      "sshUrl": "git+ssh://git@github.com/jestcastro/cordova-plugin-firebase.git",
      "httpsUrl": "git+https://github.com/jestcastro/cordova-plugin-firebase.git",
      "gitUrl": "git://github.com/jestcastro/cordova-plugin-firebase.git",
      "shortcut": "github:jestcastro/cordova-plugin-firebase",
      "directUrl": "https://raw.githubusercontent.com/jestcastro/cordova-plugin-firebase/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/jestcastro/cordova-plugin-firebase.git#79dbf4974ba736e12f46502a56ff1bda1bb9c5d3",
  "_shasum": "3f048a0690a85067b7688e52c0bb54119930771f",
  "_shrinkwrap": null,
  "_spec": "https://github.com/jestcastro/cordova-plugin-firebase.git",
  "_where": "/Users/Nagu/Downloads/Nearme/NearmeApp",
  "author": {
    "name": "Robert Arnesson"
  },
  "bugs": {
    "url": "https://github.com/arnesson/cordova-plugin-firebase/issues"
  },
  "cordova": {
    "id": "cordova-plugin-firebase",
    "platforms": [
      "android",
      "ios",
      "browser"
    ]
  },
  "dependencies": {},
  "description": "Cordova plugin for Google Firebase",
  "devDependencies": {},
  "gitHead": "79dbf4974ba736e12f46502a56ff1bda1bb9c5d3",
  "homepage": "https://github.com/arnesson/cordova-plugin-firebase#readme",
  "keywords": [
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios",
    "cordova-browser",
    "firebase",
    "push",
    "notifications",
    "phone auth"
  ],
  "license": "MIT",
  "name": "cordova-plugin-firebase",
  "optionalDependencies": {},
  "readme": "# cordova-plugin-firebase\nThis plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project!\nAndroid and iOS supported.\n\nDonations are welcome and will go towards further development of this project. Use the wallet address below to donate.\n\nBTC: 1JuXhHMCPHXT2fDfSRUTef9TpE2D67sc9f\n\nThank you for your support!\n\n## in this fork\n### verifyPhoneNumber (Android only)\n\nRequest a verificationId and send a SMS with a verificatioCode.\nUse them to construct a credenial to sign in the user (in your app).\nhttps://firebase.google.com/docs/auth/android/phone-auth\nhttps://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithCredential\n\nNOTE: To use this auth you need to configure your app SHA hash in the android app configuration on firebase console.\nSee https://developers.google.com/android/guides/client-auth to know how to get SHA app hash.\n\nNOTE: This will only works on physical devices.\n\n```\nwindow.FirebasePlugin.verifyPhoneNumber(number, timeOutDuration, function(credential) {\n    console.log(credential);\n\n    // ask user to input verificationCode:\n    var code = inputField.value.toString();\n\n    var verificationId = credential.verificationId;\n    \n    var signInCredential = firebase.auth.PhoneAuthProvider.credential(verificationId, code);\n    firebase.auth().signInWithCredential(signInCredential);\n}, function(error) {\n    console.error(error);\n});\n```\n\n## Installation\nSee npm package for versions - https://www.npmjs.com/package/cordova-plugin-firebase\n\nInstall the plugin by adding it your project's config.xml:\n```\n<plugin name=\"cordova-plugin-firebase\" spec=\"0.1.24\" />\n```\nor by running:\n```\ncordova plugin add cordova-plugin-firebase@0.1.24 --save\n```\nDownload your Firebase configuration files, GoogleService-Info.plist for ios and google-services.json for android, and place them in the root folder of your cordova project:\n\n```\n- My Project/\n    platforms/\n    plugins/\n    www/\n    config.xml\n    google-services.json       <--\n    GoogleService-Info.plist   <--\n    ...\n```\n\nSee https://support.google.com/firebase/answer/7015592 for details how to download the files from firebase.\n\nThis plugin uses a hook (after prepare) that copies the configuration files to the right place, namely platforms/ios/\\<My Project\\>/Resources for ios and platforms/android for android.\n\n**Note that the Firebase SDK requires the configuration files to be present and valid, otherwise your app will crash on boot or Firebase features won't work.**\n\n## Google Tag Manager\n### Android\nDownload your container-config json file from Tag Manager and add a resource-file node in your config.xml.\n```\n....\n<platform name=\"android\">\n        <content src=\"index.html\" />\n        <resource-file src=\"GTM-5MFXXXX.json\" target=\"assets/containers/GTM-5MFXXXX.json\" />\n        ...\n```\n\n## Changing Notification Icon\nThe plugin will use notification_icon from drawable resources if it exists, otherwise the default app icon will is used.\nTo set a big icon and small icon for notifications, define them through drawable nodes.  \nCreate the required styles.xml files and add the icons to the  \n`<projectroot>/res/native/android/res/<drawable-DPI>` folders.  \n\nThe example below uses a png named \"ic_silhouette.png\", the app Icon (@mipmap/icon) and sets a base theme.  \nFrom android version 21 (Lollipop) notifications were changed, needing a seperate setting.  \nIf you only target Lollipop and above, you don't need to setup both.  \nThankfully using the version dependant asset selections, we can make one build/apk supporting all target platforms.  \n`<projectroot>/res/native/android/res/values/styles.xml`\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<resources>\n    <!-- inherit from the holo theme -->\n    <style name=\"AppTheme\" parent=\"android:Theme.Light\">\n        <item name=\"android:windowDisablePreview\">true</item>\n    </style>\n    <drawable name=\"notification_big\">@mipmap/icon</drawable>\n    <drawable name=\"notification_icon\">@mipmap/icon</drawable>\n</resources>\n```\nand  \n`<projectroot>/res/native/android/res/values-v21/styles.xml`\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<resources>\n    <!-- inherit from the material theme -->\n    <style name=\"AppTheme\" parent=\"android:Theme.Material\">\n        <item name=\"android:windowDisablePreview\">true</item>\n    </style>\n    <drawable name=\"notification_big\">@mipmap/icon</drawable>\n    <drawable name=\"notification_icon\">@drawable/ic_silhouette</drawable>\n</resources>\n```\n\n## Notification Colors\n\nOn Android Lollipop and above you can also set the accent color for the notification by adding a color setting.\n\n`<projectroot>/res/native/android/res/values/colors.xml`\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"primary\">#FFFFFF00</color>\n    <color name=\"primary_dark\">#FF220022</color>\n    <color name=\"accent\">#FF00FFFF</color>\n</resources>\n```\n\n\n### Notes about PhoneGap Build\n\nHooks does not work with PhoneGap Build. This means you will have to manually make sure the configuration files are included. One way to do that is to make a private fork of this plugin and replace the placeholder config files (see src/ios and src/android) with your actual ones, as well as hard coding your app id and api key in plugin.xml.\n\n\n## Methods\n\n### getToken\n\nGet the device token (id):\n```\nwindow.FirebasePlugin.getToken(function(token) {\n    // save this server-side and use it to push notifications to this device\n    console.log(token);\n}, function(error) {\n    console.error(error);\n});\n```\nNote that token will be null if it has not been established yet\n\n### onTokenRefresh\n\nRegister for token changes:\n```\nwindow.FirebasePlugin.onTokenRefresh(function(token) {\n    // save this server-side and use it to push notifications to this device\n    console.log(token);\n}, function(error) {\n    console.error(error);\n});\n```\nThis is the best way to get a valid token for the device as soon as the token is established\n\n### onNotificationOpen\n\nRegister notification callback:\n```\nwindow.FirebasePlugin.onNotificationOpen(function(notification) {\n    console.log(notification);\n}, function(error) {\n    console.error(error);\n});\n```\nNotification flow:\n\n1. App is in foreground:\n    1. User receives the notification data in the JavaScript callback without any notification on the device itself (this is the normal behaviour of push notifications, it is up to you, the developer, to notify the user)\n2. App is in background:\n    1. User receives the notification message in its device notification bar\n    2. User taps the notification and the app opens\n    3. User receives the notification data in the JavaScript callback\n\nNotification icon on Android:\n\n[Changing notification icon](#changing-notification-icon)\n\n### grantPermission (iOS only)\n\nGrant permission to recieve push notifications (will trigger prompt):\n```\nwindow.FirebasePlugin.grantPermission();\n```\n### hasPermission\n\nCheck permission to recieve push notifications:\n```\nwindow.FirebasePlugin.hasPermission(function(data){\n    console.log(data.isEnabled);\n});\n```\n\n### setBadgeNumber\n\nSet a number on the icon badge:\n```\nwindow.FirebasePlugin.setBadgeNumber(3);\n```\n\nSet 0 to clear the badge\n```\nwindow.FirebasePlugin.setBadgeNumber(0);\n```\n\n### getBadgeNumber\n\nGet icon badge number:\n```\nwindow.FirebasePlugin.getBadgeNumber(function(n) {\n    console.log(n);\n});\n```\n\n### subscribe\n\nSubscribe to a topic:\n```\nwindow.FirebasePlugin.subscribe(\"example\");\n```\n\n### unsubscribe\n\nUnsubscribe from a topic:\n```\nwindow.FirebasePlugin.unsubscribe(\"example\");\n```\n\n### unregister\n\nUnregister from firebase, used to stop receiving push notifications. Call this when you logout user from your app. :\n```\nwindow.FirebasePlugin.unregister();\n```\n\n### logEvent\n\nLog an event using Analytics:\n```\nwindow.FirebasePlugin.logEvent(\"select_content\", {content_type: \"page_view\", item_id: \"home\"});\n```\n\n### setScreenName\n\nSet the name of the current screen in Analytics:\n```\nwindow.FirebasePlugin.setScreenName(\"Home\");\n```\n\n### setUserId\n\nSet a user id for use in Analytics:\n```\nwindow.FirebasePlugin.setUserId(\"user_id\");\n```\n\n### setUserProperty\n\nSet a user property for use in Analytics:\n```\nwindow.FirebasePlugin.setUserProperty(\"name\", \"value\");\n```\n\n### fetch\n\nFetch Remote Config parameter values for your app:\n```\nwindow.FirebasePlugin.fetch();\n// or, specify the cacheExpirationSeconds\nwindow.FirebasePlugin.fetch(600);\n```\n\n### activateFetched\n\nActivate the Remote Config fetched config:\n```\nwindow.FirebasePlugin.activateFetched(function(activated) {\n    // activated will be true if there was a fetched config activated,\n    // or false if no fetched config was found, or the fetched config was already activated.\n    console.log(activated);\n}, function(error) {\n    console.error(error);\n});\n```\n\n### getValue\n\nRetrieve a Remote Config value:\n```\nwindow.FirebasePlugin.getValue(\"key\", function(value) {\n    console.log(value);\n}, function(error) {\n    console.error(error);\n});\n// or, specify a namespace for the config value\nwindow.FirebasePlugin.getValue(\"key\", \"namespace\", function(value) {\n    console.log(value);\n}, function(error) {\n    console.error(error);\n});\n```\n\n### getByteArray (Android only)\n**NOTE: byte array is only available for SDK 19+**\nRetrieve a Remote Config byte array:\n```\nwindow.FirebasePlugin.getByteArray(\"key\", function(bytes) {\n    // a Base64 encoded string that represents the value for \"key\"\n    console.log(bytes.base64);\n    // a numeric array containing the values of the byte array (i.e. [0xFF, 0x00])\n    console.log(bytes.array);\n}, function(error) {\n    console.error(error);\n});\n// or, specify a namespace for the byte array\nwindow.FirebasePlugin.getByteArray(\"key\", \"namespace\", function(bytes) {\n    // a Base64 encoded string that represents the value for \"key\"\n    console.log(bytes.base64);\n    // a numeric array containing the values of the byte array (i.e. [0xFF, 0x00])\n    console.log(bytes.array);\n}, function(error) {\n    console.error(error);\n});\n```\n\n### getInfo (Android only)\n\nGet the current state of the FirebaseRemoteConfig singleton object:\n```\nwindow.FirebasePlugin.getInfo(function(info) {\n    // the status of the developer mode setting (true/false)\n    console.log(info.configSettings.developerModeEnabled);\n    // the timestamp (milliseconds since epoch) of the last successful fetch\n    console.log(info.fetchTimeMillis);\n    // the status of the most recent fetch attempt (int)\n    console.log(info.lastFetchStatus);\n}, function(error) {\n    console.error(error);\n});\n```\n\n### setConfigSettings (Android only)\n\nChange the settings for the FirebaseRemoteConfig object's operations:\n```\nvar settings = {\n    developerModeEnabled: true\n}\nwindow.FirebasePlugin.setConfigSettings(settings);\n```\n\n### setDefaults (Android only)\n\nSet defaults in the Remote Config:\n```\n// define defaults\nvar defaults = {\n    // map property name to value in Remote Config defaults\n    mLong: 1000,\n    mString: 'hello world',\n    mDouble: 3.14,\n    mBoolean: true,\n    // map \"mBase64\" to a Remote Config byte array represented by a Base64 string\n    // Note: the Base64 string is in an array in order to differentiate from a string config value\n    mBase64: [\"SGVsbG8gV29ybGQ=\"],\n    // map \"mBytes\" to a Remote Config byte array represented by a numeric array\n    mBytes: [0xFF, 0x00]\n}\n// set defaults\nwindow.FirebasePlugin.setDefaults(defaults);\n// or, specify a namespace\nwindow.FirebasePlugin.setDefaults(defaults, \"namespace\");\n```\n\n### Phone Authentication\n**BASED ON THE CONTRIBUTIONS OF**\nIOS \nhttps://github.com/silverio/cordova-plugin-\n\nANDROID \nhttps://github.com/apptum/cordova-plugin-firebase\n\n**((((IOS))): SETUP YOUR PUSH NOTIFICATIONS FIRST, AND VERIFY THAT THEY ARE ARRIVING TO YOUR PHYSICAL DEVICE BEFORE YOU TEST THIS METHOD. USE THE APNS AUTH KEY TO GENERATE THE .P8 FILE AND UPLOAD IT TO FIREBASE.\nWHEN YOU CALL THIS METHOD, FCM SENDS A SILENT PUSH TO THE DEVICE TO VERIFY IT.**\n\nThis method sends an SMS to the user with the SMS_code and gets the verification id you need to continue the sign in process, with the Firebase JS SDK.\n\n```\nwindow.FirebasePlugin.getVerificationID(\"+573123456789\",function(id) {\n                console.log(\"verificationID: \"+id);\n                \n            }, function(error) {             \n                console.error(error);\n            });\n```\n\nUsing Ionic2?\n```\n  (<any>window).FirebasePlugin.getVerificationID(\"+573123456789\", id => {\n          console.log(\"verificationID: \" + id);\n          this.verificationId = id;\n        }, error => {\n          console.log(\"error: \" + error);\n        });\n```\nGet the intermediate AuthCredential object\n```\nvar credential = firebase.auth.PhoneAuthProvider.credential(verificationId, SMS_code);\n```\nThen, you can sign in the user with the credential:\n```\nfirebase.auth().signInWithCredential(credential);\n```\nOr link to an account\n```\nfirebase.auth().currentUser.linkWithCredential(credential)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/arnesson/cordova-plugin-firebase.git"
  },
  "version": "0.1.24"
}
